{"version":3,"sources":["utils/auth.js","utils/mutations.js","utils/localStorage.js","pages/SearchBooks.js","utils/API.js","utils/queries.js","pages/SavedBooks.js","components/SignupForm.js","components/LoginForm.js","components/Navbar.js","App.js","index.js"],"names":["decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","gql","SAVE_BOOK","REMOVE_BOOK","ADD_USER","LOGIN_USER","removeBookId","bookId","savedBookIds","JSON","parse","updatedSavedBookIds","filter","savedBookId","stringify","SearchBooks","useMutation","saveBook","error","useState","searchedBooks","setSearchedBooks","searchInput","setSearchInput","setSavedBookIds","useEffect","bookIdArr","length","handleFormSubmit","event","a","preventDefault","fetch","response","ok","Error","json","items","bookData","map","book","id","authors","volumeInfo","title","description","image","imageLinks","thumbnail","console","handleSaveBook","bookToSave","find","Auth","loggedIn","log","payload","link","variables","Jumbotron","fluid","className","Container","Form","onSubmit","Row","Col","xs","md","Control","name","value","onChange","e","target","type","size","placeholder","Button","variant","CardColumns","Card","key","border","Img","src","alt","Body","Title","Text","disabled","some","onClick","GET_ME","SavedBooks","userData","setUserData","deleteBook","userDataLength","Object","keys","useQuery","data","loading","getUserData","handleDeleteBook","updatedUser","savedBooks","SignupForm","username","email","password","userFormData","setUserFormData","validated","showAlert","setShowAlert","addUser","handleInputChange","currentTarget","checkValidity","stopPropagation","login","noValidate","Alert","dismissible","onClose","show","Group","Label","htmlFor","required","Feedback","LoginForm","loginUser","AppNavbar","showModal","setShowModal","Navbar","bg","expand","Brand","as","Link","to","Toggle","aria-controls","Collapse","Nav","logout","Modal","onHide","aria-labelledby","Tab","defaultActiveKey","Header","closeButton","Item","eventKey","Content","Pane","handleModalClose","client","ApolloClient","uri","cache","InMemoryCache","App","ApolloProvider","exact","path","component","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8bdd3fa9.chunk.js","sourcesContent":["// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode';\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import { gql } from \"@apollo/client\";\r\n\r\nexport const CREATE_USER = gql`\r\nmutation CreateUser($username:String!,$email:String!,$password:String!){\r\n    createUser(username:$username,email:$email,password:$password){\r\n      username\r\n      email\r\n      _id\r\n    }\r\n  }\r\n`\r\nexport const SAVE_BOOK = gql`\r\n  mutation saveBook($token:String!,$description:String!, $bookId:String!, $title:String!, $authors:[String],$link:String,$image:String){\r\n    saveBook(token:$token,description:$description,bookId:$bookId,title:$title,authors:$authors,link:$link,image:$image){\r\n      _id\r\n      username\r\n      savedBooks{\r\n        authors\r\n        description\r\n        bookId\r\n        link\r\n        image\r\n        title\r\n      }\r\n    }\r\n  }\r\n`\r\nexport const REMOVE_BOOK = gql`\r\n  mutation removeBook($token:String!,$bookId:String!){\r\n    removeBook(token:$token,bookId:$bookId){\r\n      _id\r\n      username\r\n      savedBooks{\r\n        authors\r\n        description\r\n        bookId\r\n        link\r\n        image\r\n        title\r\n      }\r\n    }\r\n  }\r\n`\r\nexport const ADD_USER = gql`\r\n  mutation addUser($username:String!,$email:String!,$password:String!){\r\n    addUser(username:$username,email:$email,password:$password){\r\n      token\r\n    }\r\n  }\r\n`\r\nexport const LOGIN_USER=gql`\r\n  mutation login($email:String!,$password:String!){\r\n    login(email:$email,password:$password){\r\n      token\r\n    }\r\n  }\r\n`","export const getSavedBookIds = () => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : [];\n\n  return savedBookIds;\n};\n\nexport const saveBookIds = (bookIdArr) => {\n  if (bookIdArr.length) {\n    localStorage.setItem('saved_books', JSON.stringify(bookIdArr));\n  } else {\n    localStorage.removeItem('saved_books');\n  }\n};\n\nexport const removeBookId = (bookId) => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : null;\n\n  if (!savedBookIds) {\n    return false;\n  }\n\n  const updatedSavedBookIds = savedBookIds?.filter((savedBookId) => savedBookId !== bookId);\n  localStorage.setItem('saved_books', JSON.stringify(updatedSavedBookIds));\n\n  return true;\n};\n","import React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, Col, Form, Button, Card, CardColumns } from 'react-bootstrap';\nimport { useMutation } from '@apollo/client';\nimport Auth from '../utils/auth';\nimport {SAVE_BOOK} from \"../utils/mutations\"\nimport { searchGoogleBooks } from '../utils/API';\n\n\nimport { saveBookIds, getSavedBookIds } from '../utils/localStorage';\nconst SearchBooks = () => {\n  const [saveBook,{error}]=useMutation(SAVE_BOOK)\n  // create state for holding returned google api data\n  const [searchedBooks, setSearchedBooks] = useState([]);\n  // create state for holding our search field data\n  const [searchInput, setSearchInput] = useState('');\n\n  // create state to hold saved bookId values\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\n\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\n  useEffect(() => {\n    return () => saveBookIds(savedBookIds);\n  });\n\n  // create method to search for books and set state on form submit\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await searchGoogleBooks(searchInput);\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      const { items } = await response.json();\n\n      const bookData = items.map((book) => ({\n        bookId: book.id,\n        authors: book.volumeInfo.authors || ['No author to display'],\n        title: book.volumeInfo.title,\n        description: book.volumeInfo.description,\n        image: book.volumeInfo.imageLinks?.thumbnail || '',\n      }));\n\n      setSearchedBooks(bookData);\n      setSearchInput('');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // create function to handle saving a book to our database\n  const handleSaveBook = async (bookId) => {\n    // find the book in `searchedBooks` state by the matching id\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\n\n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n    try {\n      console.log(bookToSave);\n      const payload = {\n        token:token,\n        description:bookToSave.description,\n        bookId:bookToSave.bookId,\n        title:bookToSave.title,\n        authors:bookToSave.authors,\n        link:bookToSave.link,\n        image:bookToSave.image\n    }\n      console.log(\"payload:\",payload);\n      const response = await saveBook({\n        variables:{\n          token:token,\n          description:bookToSave.description,\n          bookId:bookToSave.bookId,\n          title:bookToSave.title,\n          authors:bookToSave.authors,\n          link:bookToSave.link,\n          image:bookToSave.image\n      }\n      });\n      // if book successfully saves to user's account, save book id to state\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Search for Books!</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Form.Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name='searchInput'\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type='text'\n                  size='lg'\n                  placeholder='Search for a book'\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type='submit' variant='success' size='lg'>\n                  Submit Search\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Container>\n      </Jumbotron>\n\n      <Container>\n        <h2>\n          {searchedBooks.length\n            ? `Viewing ${searchedBooks.length} results:`\n            : 'Search for a book to begin'}\n        </h2>\n        <CardColumns>\n          {searchedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? (\n                  <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  {Auth.loggedIn() && (\n                    <Button\n                      disabled={savedBookIds?.some((savedBookId) => savedBookId === book.bookId)}\n                      className='btn-block btn-info'\n                      onClick={() => handleSaveBook(book.bookId)}>\n                      {savedBookIds?.some((savedBookId) => savedBookId === book.bookId)\n                        ? 'This book has already been saved!'\n                        : 'Save this Book!'}\n                    </Button>\n                  )}\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SearchBooks;\n","//this is what the getSingleUser call would look like if it would work.\nexport const getMe = async(token) => {\n  return fetch('/api/users/me', {\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`,\n    },\n  });\n};\n//this is what the createUser would look like if it would work\nexport const createUser = async(userData) => {\n  return fetch('/api/users', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(userData),\n  });\n};\n\nexport const loginUser = (userData) => {\n  return fetch('/api/users/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(userData),\n  });\n};\n\n// save book data for a logged in user\nexport const saveBook = (bookData, token) => {\n  return fetch('/api/users', {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(bookData),\n  });\n};\n\n// remove saved book data for a logged in user\nexport const deleteBook = (bookId, token) => {\n  return fetch(`/api/users/books/${bookId}`, {\n    method: 'DELETE',\n    headers: {\n      authorization: `Bearer ${token}`,\n    },\n  });\n};\n\n// make a search to google books api\n// https://www.googleapis.com/books/v1/volumes?q=harry+potter\nexport const searchGoogleBooks = (query) => {\n  return fetch(`https://www.googleapis.com/books/v1/volumes?q=${query}`);\n};\n","import { gql } from \"@apollo/client\";\r\n\r\nexport const GET_ME=gql`\r\nquery me($token:String!){\r\n    user(token:$token){\r\n      username\r\n    }\r\n  }\r\n`","import React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\nimport { useQuery, useMutation } from '@apollo/client';\nimport Auth from '../utils/auth';\nimport { removeBookId } from '../utils/localStorage';\nimport {GET_ME} from \"../utils/queries\";\nimport { REMOVE_BOOK } from \"../utils/mutations\";\nconst SavedBooks = () => {\n  const [userData, setUserData] = useState({});\n  const [deleteBook,{err}]=useMutation(REMOVE_BOOK)\n  // use this to determine if `useEffect()` hook needs to run again\n  const userDataLength = Object.keys(userData).length;\n  const token = Auth.loggedIn() ? Auth.getToken() : null;\n  const {loading,error,data}=useQuery(GET_ME,{\n    variables:{token}\n  })\n  console.log(\"token:\",token);\n  console.log(\"data:\",data);\n  useEffect(() => {\n    const getUserData = async () => {\n      try {\n        console.log(\"token: \",token);\n        if (!token) {\n          return false;\n        }\n        console.log(\"user: \",data);\n        setUserData(data);\n      } catch (err) {\n        console.error(err);\n      }\n    };\n    getUserData();\n  },[userDataLength]);\n\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\n  const handleDeleteBook = async (bookId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const updatedUser = await deleteBook({\n        variables:{token,bookId}\n      });\n      setUserData(updatedUser);\n      // upon success, remove book's id from localStorage\n      removeBookId(bookId);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // if data isn't here yet, say so\n  // if (!userDataLength) {\n  //   return <h2>LOADING...</h2>;\n  // }\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Viewing saved books!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {userData.savedBooks.length\n            ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? 'book' : 'books'}:`\n            : 'You have no saved books!'}\n        </h2>\n        <CardColumns>\n          {userData.savedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' /> : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  <Button className='btn-block btn-danger' onClick={() => handleDeleteBook(book.bookId)}>\n                    Delete this Book!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedBooks;\n","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { Form, Button, Alert } from 'react-bootstrap';\n\n// import { createUser } from '../utils/API';\n\nimport {ADD_USER} from \"../utils/mutations\"\nimport Auth from '../utils/auth';\n\nconst SignupForm = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n\n  const [addUser,{error}]=useMutation(ADD_USER)\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      console.log(userFormData);\n      const response = await addUser({\n        variables:userFormData\n      });\n      const { token } = response.data.addUser;\n      Auth.login(token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor='username'>Username</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your username'\n            name='username'\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='email'\n            placeholder='Your email address'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.username && userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;\n","// see SignupForm.js for comments\nimport React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { useMutation } from '@apollo/client';\n// import { loginUser } from '../utils/API';\nimport { LOGIN_USER } from '../utils/mutations';\n\nimport Auth from '../utils/auth';\n\nconst LoginForm = () => {\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n  const [loginUser,{error}]=useMutation(LOGIN_USER)\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const response = await loginUser({\n        variables:userFormData\n      });\n      const { token } = await response.data.login\n      Auth.login(token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your login credentials!\n        </Alert>\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your email'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default LoginForm;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\nimport SignUpForm from './SignupForm';\nimport LoginForm from './LoginForm';\n\nimport Auth from '../utils/auth';\n\nconst AppNavbar = () => {\n  // set modal display state\n  const [showModal, setShowModal] = useState(false);\n\n  return (\n    <>\n      <Navbar bg='dark' variant='dark' expand='lg'>\n        <Container fluid>\n          <Navbar.Brand as={Link} to='/'>\n            Google Books Search\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls='navbar' />\n          <Navbar.Collapse id='navbar'>\n            <Nav className='ml-auto'>\n              <Nav.Link as={Link} to='/'>\n                Search For Books\n              </Nav.Link>\n              {/* if user is logged in show saved books and logout */}\n              {Auth.loggedIn() ? (\n                <>\n                  <Nav.Link as={Link} to='/saved'>\n                    See Your Books\n                  </Nav.Link>\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\n                </>\n              ) : (\n                <Nav.Link onClick={() => setShowModal(true)}>Login/Sign Up</Nav.Link>\n              )}\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n      {/* set modal data up */}\n      <Modal\n        size='lg'\n        show={showModal}\n        onHide={() => setShowModal(false)}\n        aria-labelledby='signup-modal'>\n        {/* tab container to do either signup or login component */}\n        <Tab.Container defaultActiveKey='login'>\n          <Modal.Header closeButton>\n            <Modal.Title id='signup-modal'>\n              <Nav variant='pills'>\n                <Nav.Item>\n                  <Nav.Link eventKey='login'>Login</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey='signup'>Sign Up</Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Tab.Content>\n              <Tab.Pane eventKey='login'>\n                <LoginForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n              <Tab.Pane eventKey='signup'>\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n            </Tab.Content>\n          </Modal.Body>\n        </Tab.Container>\n      </Modal>\n    </>\n  );\n};\n\nexport default AppNavbar;\n","import React from 'react';\nimport {ApolloProvider,ApolloClient,InMemoryCache} from \"@apollo/client\"\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport SearchBooks from './pages/SearchBooks';\nimport SavedBooks from './pages/SavedBooks';\nimport Navbar from './components/Navbar';\nconst client = new ApolloClient({\n  uri: '/graphql',\n  cache: new InMemoryCache(),\n});\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n    <Router>\n      <>\n        <Navbar />\n        <Switch>\n          <Route exact path='/' component={SearchBooks} />\n          <Route exact path='/saved' component={SavedBooks} />\n          <Route render={() => <h1 className='display-2'>Wrong page!</h1>} />\n        </Switch>\n      </>\n    </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}